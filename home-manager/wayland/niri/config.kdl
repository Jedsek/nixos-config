// This config is in the KDL format: https://kdl.dev
// "/-" comments out the following node.
// Check the wiki for a full description of the configuration:
// https://github.com/YaLTeR/niri/wiki/Configuration:-Overview

hotkey-overlay {
    skip-at-startup
}

workspace "browser"
workspace "code"
workspace "chat"
workspace "game"
workspace "other"

// Add lines like this to spawn processes at startup.
// Note that running niri as a session supports xdg-desktop-autostart,
// which may be more convenient to use.
spawn-at-startup "dbus-update-activation-environment" "--systemd" "WAYLAND_DISPLAY" "XDG_CURRENT_DESKTOP"
spawn-at-startup "dbus-update-activation-environment" "--systemd" "--all"

spawn-at-startup "nu" "-c" "clash-meta -f ~/config.yaml"
spawn-at-startup "pipewire"
spawn-at-startup "wireplumber"
spawn-at-startup "clash-rs" "-d" "/home/jedsek/.config/clash-rs"
spawn-at-startup "speech-dispatcher" "-d"
spawn-at-startup "swaync"
spawn-at-startup "waybar"
spawn-at-startup "swww-daemon" "--no-cache"
spawn-at-startup "pueued" "-d"
spawn-at-startup "swayosd-server"
spawn-at-startup "xwayland-satellite"
spawn-at-startup "/usr/libexec/polkit-gnome-authentication-agent-1"
spawn-at-startup "fcitx5" "-d" "-r"
spawn-at-startup "devmon"
spawn-at-startup "nu" "~/.config/niri/scripts/wallpaper.nu" "scheduled_next"
spawn-at-startup "nu" "~/.config/niri/scripts/sound.nu" "--kind" "startup"

spawn-at-startup "firefox"
spawn-at-startup "qq"
spawn-at-startup "flatpak" "run" "com.valvesoftware.Steam"

spawn-at-startup "niri" "msg" "action" "focus-workspace" "code"

environment {
    XDG_DATA_DIRS "/var/lib/flatpak/exports/share:/usr/share:usr/local/share:/home/jedsek/.local/share/flatpak/exports/share"

    ELECTRON_OZONE_PLATFORM_HINT "auto"

    DISPLAY ":0"
    QT_QPA_PLATFORM "wayland-egl"
    ELM_DISPLAY "wl"
    SDL_VIDEODRIVER "wayland"
    MOZ_ENABLE_WAYLAND "1"

    // XMODIFIERS "@im=fcitx"
    // GTK_IM_MODULE "fcitx"
    // QT4_IM_MODULE "fcitx"
    // QT_IM_MODULE "fcitx"
}

switch-events {
    lid-open { spawn "nu" "~/.config/niri/scripts/sound.nu" "--kind" "resume"; }
}

input {
    keyboard {
        repeat-delay 250
        repeat-rate 25
    }

    // Next sections include libinput settings.
    // Omitting settings disables them, or leaves them at their default values.
    touchpad {
        tap
        // dwt
        // dwtp
        natural-scroll
        accel-speed 0.4
        accel-profile "adaptive"
    }

    mouse {
        natural-scroll
        accel-speed 0.4
        accel-profile "adaptive"
    }

    // Uncomment this to make the mouse warp to the center of newly focused windows.
    warp-mouse-to-focus

    // Focus windows and outputs automatically when moving the mouse into them.
    focus-follows-mouse

    disable-power-key-handling
}

// You can configure outputs by their name, which you can find
// by running `niri msg outputs` while inside a niri instance.
// The built-in laptop monitor is usually called "eDP-1".
// Find more information on the wiki:
// https://github.com/YaLTeR/niri/wiki/Configuration:-Outputs
// Remember to uncomment the node by removing "/-"!
/-output "eDP-1" {
    // Uncomment this line to disable this output.
    // off

    // Resolution and, optionally, refresh rate of the output.
    // The format is "<width>x<height>" or "<width>x<height>@<refresh rate>".
    // If the refresh rate is omitted, niri will pick the highest refresh rate
    // for the resolution.
    // If the mode is omitted altogether or is invalid, niri will pick one automatically.
    // Run `niri msg outputs` while inside a niri instance to list all outputs and their modes.
    mode "1920x1080@120.030"

    // Scale is a floating-point number, but at the moment only integer values work.
    scale 1.4

    // Transform allows to rotate the output counter-clockwise, valid values are:
    // normal, 90, 180, 270, flipped, flipped-90, flipped-180 and flipped-270.
    transform "normal"

    // Position of the output in the global coordinate space.
    // This affects directional monitor actions like "focus-monitor-left", and cursor movement.
    // The cursor can only move between directly adjacent outputs.
    // Output scale and rotation has to be taken into account for positioning:
    // outputs are sized in logical, or scaled, pixels.
    // For example, a 3840×2160 output with scale 2.0 will have a logical size of 1920×1080,
    // so to put another output directly adjacent to it on the right, set its x to 1920.
    // If the position is unset or results in an overlap, the output is instead placed
    // automatically.
    position x=1280 y=0
}

// Settings that influence how windows are positioned and sized.
// Find more information on the wiki:
// https://github.com/YaLTeR/niri/wiki/Configuration:-Layout
layout {
    // Set gaps around windows in logical pixels.
    gaps 2

    // When to center a column when changing focus, options are:
    // - "never", default behavior, focusing an off-screen column will keep at the left
    //   or right edge of the screen.
    // - "always", the focused column will always be centered.
    // - "on-overflow", focusing a column will center it if it doesn't fit
    //   together with the previously focused column.
    center-focused-column "on-overflow"

    // You can customize the widths that "switch-preset-column-width" (Mod+R) toggles between.
    preset-column-widths {
        // Proportion sets the width as a fraction of the output width, taking gaps into account.
        // For example, you can perfectly fit four windows sized "proportion 0.25" on an output.
        // The default preset widths are 1/3, 1/2 and 2/3 of the output.
        proportion 0.33333
        proportion 0.5
        proportion 0.66667

        // Fixed sets the width in logical pixels exactly.
        // fixed 1920
    }

    // You can change the default width of the new windows.
    default-column-width { proportion 0.5; }
    // If you leave the brackets empty, the windows themselves will decide their initial width.
    // default-column-width {}

    // By default focus ring and border are rendered as a solid background rectangle
    // behind windows. That is, they will show up through semitransparent windows.
    // This is because windows using client-side decorations can have an arbitrary shape.
    //
    // If you don't like that, you should uncomment `prefer-no-csd` below.
    // Niri will draw focus ring and border *around* windows that agree to omit their
    // client-side decorations.
    //
    // Alternatively, you can override it with a window rule called
    // `draw-border-with-background`.

    // You can change how the focus ring looks.
    focus-ring {
        // Uncomment this line to disable the focus ring.
        // off

        // How many logical pixels the ring extends out from the windows.
        width 4

        // Colors can be set in a variety of ways:
        // - CSS named colors: "red"
        // - RGB hex: "#rgb", "#rgba", "#rrggbb", "#rrggbbaa"
        // - CSS-like notation: "rgb(255, 127, 0)", rgba(), hsl() and a few others.

        // Color of the ring on the active monitor.
        active-color "#7fc8ff"

        // Color of the ring on inactive monitors.
        // inactive-color "#505050"

        // You can also use gradients. They take precedence over solid colors.
        // Gradients are rendered the same as CSS linear-gradient(angle, from, to).
        // The angle is the same as in linear-gradient, and is optional,
        // defaulting to 180 (top-to-bottom gradient).
        // You can use any CSS linear-gradient tool on the web to set these up.
        //
        // active-gradient from="#80c8ff" to="#bbddff" angle=45

        // You can also color the gradient relative to the entire view
        // of the workspace, rather than relative to just the window itself.
        // To do that, set relative-to="workspace-view".
        //
        // inactive-gradient from="#505050" to="#808080" angle=45 relative-to="workspace-view"
    }

    // You can also add a border. It's similar to the focus ring, but always visible.
    border {
        // The settings are the same as for the focus ring.
        // If you enable the border, you probably want to disable the focus ring.
        // off

        width 4
        active-color "#ffc87f00"
        inactive-color "#50505000"

        // active-gradient from="#ffbb66" to="#ffc880" angle=45 relative-to="workspace-view"
        // inactive-gradient from="#505050" to="#808080" angle=45 relative-to="workspace-view"
    }

    // Struts shrink the area occupied by windows, similarly to layer-shell panels.
    // You can think of them as a kind of outer gaps. They are set in logical pixels.
    // Left and right struts will cause the next window to the side to always be visible.
    // Top and bottom struts will simply add outer gaps in addition to the area occupied by
    // layer-shell panels and regular gaps.
    struts {
        // left 16
        // right 16
        // top 0
        // bottom 0
    }
}

// Uncomment this line to ask the clients to omit their client-side decorations if possible.
// If the client will specifically ask for CSD, the request will be honored.
// Additionally, clients will be informed that they are tiled, removing some rounded corners.
prefer-no-csd

// You can change the path where screenshots are saved.
// A ~ at the front will be expanded to the home directory.
// The path is formatted with strftime(3) to give you the screenshot date and time.
screenshot-path "~/Pictures/Screenshots/Screenshot-%Y-%m-%d-%H-%M-%S.png"

// You can also set this to null to disable saving screenshots to disk.
// screenshot-path null

// Animation settings.
// The wiki explains how to configure individual animations:
// https://github.com/YaLTeR/niri/wiki/Configuration:-Animations
animations {
    // Uncomment to turn off all animations.
    // off

    // Slow down all animations by this factor. Values below 1 speed them up instead.
    slowdown 1.0
}

// Window rules let you adjust behavior for individual windows.
// Find more information on the wiki:
// https://github.com/YaLTeR/niri/wiki/Configuration:-Window-Rules
window-rule {
    match app-id="firefox|zen-browser|zen"

    open-on-workspace "browser"
    open-maximized true
    open-focused false
}

window-rule {
    match app-id="mpv|imv"

    open-floating true
}

window-rule {
    match app-id="Alacritty"
    
    open-on-workspace "code"
    open-focused true
}

window-rule {
    match app-id="com.mitchellh.ghostty"
    
    open-on-workspace "code"
    open-focused true
}

window-rule {
    match app-id="org.gnome.Nautilus"
    
    open-on-workspace "code"
    open-focused true
    open-floating true
}

window-rule {
    match app-id="QQ"

    open-on-workspace "chat"
    open-focused false
}

window-rule {
    match app-id="steam"

    open-on-workspace "game"
    open-focused false
}

window-rule {
    match app-id="imv"

    open-floating true
}

window-rule {
    match app-id="Clash for Windows"

    open-on-workspace "other"
    open-focused false
}

window-rule {
    match app-id="com.obsproject.Studio"

    open-on-workspace "other"
    open-maximized true
    open-focused true
}

// Example: block out two password managers from screen capture.
// (This example rule is commented out with a "/-" in front.)
/-window-rule {
    match app-id=r#"^org\.keepassxc\.KeePassXC$"#
    match app-id=r#"^org\.gnome\.World\.Secrets$"#

    block-out-from "screen-capture"

    // Use this instead if you want them visible on third-party screenshot tools.
    // block-out-from "screencast"
}

binds {
    // Keys consist of modifiers separated by + signs, followed by an XKB key name
    // in the end. To find an XKB name for a particular key, you may use a program
    // like wev.
    //
    // "Mod" is a special modifier equal to Super when running on a TTY, and to Alt
    // when running as a winit window.
    //
    // Most actions that you can bind here can also be invoked programmatically with
    // `niri msg action do-something`.

    // shows a list of important hotkeys.
    Mod+Alt+Slash { show-hotkey-overlay; }

    // Suggested binds for running programs: terminal, app launcher, screen locker...
    Mod+Return { spawn "ghostty"; }
    Mod+Shift+Return { spawn "nu" "-c" "if (alacritty msg create-window | complete | get exit_code) != 0 { alacritty -e nu -n}"; }
    Mod+D { spawn "fuzzel"; }
    Mod+Shift+D { spawn "nu" "~/.config/niri/scripts/commands_menu.nu"; }
    Mod+B { spawn "firefox"; }
    Mod+E { spawn "nautilus"; }
    Mod+X { spawn "curl" "127.0.0.1:60828/input_translate"; }
    Mod+N { spawn "swaync-client" "-t"; }
    Mod+Escape { spawn "swaylock" "-i" "~/.config/niri/assets/lock.png"; }


    Mod+Slash { spawn "pkill" "-SIGUSR1" "waybar"; }

    // Audio binds
    XF86AudioRaiseVolume  allow-when-locked=true { spawn "swayosd-client" "--output-volume" "raise"; }
    XF86AudioLowerVolume  allow-when-locked=true { spawn "swayosd-client" "--output-volume" "lower"; }
    XF86AudioMute         allow-when-locked=true { spawn "swayosd-client" "--output-volume" "mute-toggle"; }
    XF86AudioMicMute      allow-when-locked=true { spawn "swayosd-client" "--input-volume"  "mute-toggle"; }
    XF86MonBrightnessUp   allow-when-locked=true { spawn "swayosd-client" "--brightness"    "raise"; }
    XF86MonBrightnessDown allow-when-locked=true { spawn "swayosd-client" "--brightness"    "lower"; }

    // Window binds
    Mod+Shift+Q { close-window; }

    Mod+V     { toggle-window-floating; }
    
    Mod+H     { focus-column-left; }
    Mod+J     { focus-window-down; }
    Mod+K     { focus-window-up; }
    Mod+L     { focus-column-right; }

    Mod+Shift+H     { move-column-left; }
    Mod+Shift+J     { move-window-down; }
    Mod+Shift+K     { move-window-up; }
    Mod+Shift+L     { move-column-right; }

    Mod+Alt+H  { focus-column-first; }
    Mod+Alt+L  { focus-column-last; }

    Mod+U               { focus-workspace-down; }
    Mod+I               { focus-workspace-up; }
    Mod+Shift+U         { move-workspace-down; }
    Mod+Shift+I         { move-workspace-up; }

    // You can refer to workspaces by index. However, keep in mind that
    // niri is a dynamic workspace system, so these commands are kind of
    // "best effort". Trying to refer to a workspace index bigger than
    // the current workspace count will instead refer to the bottommost
    // (empty) workspace.
    //
    // For example, with 2 workspaces + 1 empty, indices 3, 4, 5 and so on
    // will all refer to the 3rd workspace.
    Mod+1 { focus-workspace "browser"; }
    Mod+2 { focus-workspace "code"; }
    Mod+3 { focus-workspace "chat"; }
    Mod+4 { focus-workspace "game"; }
    Mod+5 { focus-workspace "other"; }
    Mod+6 { focus-workspace 6; }
    Mod+7 { focus-workspace 7; }
    Mod+8 { focus-workspace 8; }
    Mod+9 { focus-workspace 9; }
    Mod+Shift+1 { move-column-to-workspace "browser"; }
    Mod+Shift+2 { move-column-to-workspace "code"; }
    Mod+Shift+3 { move-column-to-workspace "chat"; }
    Mod+Shift+4 { move-column-to-workspace "game"; }
    Mod+Shift+5 { move-column-to-workspace "other"; }
    Mod+Shift+6 { move-column-to-workspace 6; }
    Mod+Shift+7 { move-column-to-workspace 7; }
    Mod+Shift+8 { move-column-to-workspace 8; }
    Mod+Shift+9 { move-column-to-workspace 9; }

    // Switches focus between the current and the previous workspace.
    Mod+Tab { focus-workspace-previous; }

    Mod+Comma  { consume-window-into-column; }
    Mod+Period { expel-window-from-column; }

    Mod+R { switch-preset-column-width; }
    Mod+F { maximize-column; }
    Mod+Shift+F { fullscreen-window; }
    Mod+C { center-column; }

    Mod+Minus { set-column-width "-10%"; }
    Mod+Equal { set-column-width "+10%"; }

    Mod+Shift+Minus { set-window-height "-10%"; }
    Mod+Shift+Equal { set-window-height "+10%"; }

    Print { screenshot; }
    Ctrl+Print { screenshot-screen; }
    Alt+Print { screenshot-window; }

    Mod+Shift+E { quit; }
    Mod+Shift+P { power-off-monitors; }
}
